@page "/change-password"
@using DailyPlanner.Web.Pages.Accounts.Services
@using DailyPlanner.Web.Pages.Accounts.Models
@using Microsoft.Extensions.Primitives
@layout MainLayout

@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<MudGrid Justify="Justify.Center" Class="pa-10 ma-0" Style="width: 100%;">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Change password</MudText>

                <MudAlert Severity="Severity.Error" Class="@(showErrors ? "mb-3 d-block" : "d-none")">
                    @foreach (var error in errors)
                    {
                        <p style="font-size: 1rem;">@error</p>
                    }
                </MudAlert>

                <MudTextField @bind-Value="model.Password" For="@(() => model.Password)"
                              Label="Password"
                              HelperText="Enter new password"
                              InputType="@passwordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />
                
                <MudTextField @bind-Value="model.ConfirmationPassword" For="@(() => model.ConfirmationPassword)"
                              Label="Confirm password"
                              HelperText="Enter new password again"
                              InputType="@passwordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />

                <div Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               ButtonType="ButtonType.Submit">Submit</MudButton>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private readonly ChangePasswordModel model = new();

    private bool passwordVisibility;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> errors = new();
    private bool showErrors;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        StringValues values;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out values))
            model.Token = values.First()?.Replace(' ', '+') ?? "";

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out values))
            model.Email = values.First()?.Replace(' ', '+') ?? "";
    }

    void TogglePasswordVisibility()
    {
        @if (passwordVisibility)
        {
            passwordVisibility = false;
            passwordInput = InputType.Password;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisibility = true;
            passwordInput = InputType.Text;
            passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task OnValidSubmit()
    {
        showErrors = false;
        var result = await AccountService.ChangePassword(model);

        if (result.IsSuccessful) NavigationManager.NavigateTo("/login");
        else
        {
            errors = result.Errors.Select(error => error.Message).ToList();
            showErrors = true;
        }
    }
}