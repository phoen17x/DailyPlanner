@using DailyPlanner.Web.Pages.TodoTasks.Services
@using DailyPlanner.Web.Pages.TodoTasks.Models
@inherits MudComponentBase

@inject ITodoTaskService TodoTaskService

<MudDialog>
    <DialogContent>
        <MudForm Model="Model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label="Title" @bind-Value="Model.Title"
                                  For="@(() => Model.Title)"
                                  Required="true"
                                  RequiredError="Title is required!"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Description" @bind-Value="Model.Description"
                                  For="@(() => Model.Description)" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Label="Start time" @bind-Date="Model.NullableStartTime"
                                   DateFormat="dd.MM.yyyy"
                                   For="@(() => Model.NullableStartTime)"
                                   Required="true"
                                   RequiredError="Date is required!" />
                </MudItem>
                <MudItem xs="6">
                    <MudTimePicker @bind-Time="StartTime"
                                   AmPm="true"
                                   For="@(() => StartTime)"
                                   Required="true"
                                   RequiredError="Time is required!" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Label="Estimated complition time" @bind-Date="Model.NullableEstimatedCompletionTime"
                                   DateFormat="dd.MM.yyyy"
                                   For="@(() => Model.NullableEstimatedCompletionTime)"
                                   Required="true"
                                   RequiredError="Date is required!" />
                </MudItem>
                <MudItem xs="6">
                    <MudTimePicker @bind-Time="EstimatedCompletionTime"
                                   AmPm="true"
                                   For="@(() => EstimatedCompletionTime)"
                                   Required="true"
                                   RequiredError="Time is required!" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    MudForm form = new();
    readonly TodoTaskModelValidator modelValidator = new();

    private bool isNew;

    [Parameter]
    public int? TodoTaskId { get; set; }

    [Parameter]
    public TodoTaskModel Model { get; set; } = new();

    TimeSpan? StartTime
    {
        get => Model.NullableStartTime!.Value.TimeOfDay;
        set => Model.NullableStartTime = Model.NullableStartTime!.Value.Date + value!.Value;
    }

    TimeSpan? EstimatedCompletionTime
    {
        get => Model.NullableEstimatedCompletionTime!.Value.TimeOfDay;
        set => Model.NullableEstimatedCompletionTime = Model.NullableEstimatedCompletionTime!.Value.Date + value!.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        isNew = TodoTaskId == null;
        if (isNew == false)
        {
            var todoTask = await TodoTaskService.GetTodoTask(TodoTaskId ?? 0);
            Model = new TodoTaskModel(todoTask);
        }

        form.ResetValidation();
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Model.StartTime = Model.NullableStartTime!.Value;
            Model.EstimatedCompletionTime = Model.NullableEstimatedCompletionTime!.Value;
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}