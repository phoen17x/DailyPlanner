@page "/timeline"
@using DailyPlanner.Web.Pages.TodoTasks.Services
@using DailyPlanner.Web.Pages.TodoTasks.Models
@using Microsoft.IdentityModel.Tokens

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITodoTaskService TodoTaskService

<MudContainer Fixed="true" Class="pa-8" Style="min-height: 100%; max-width: 1080px; display: flex; flex-direction: column; border-radius: 4px;">
    <MudContainer Class="mb-8" Style="max-width: 320px;">
        <MudDateRangePicker @ref="picker" Label="Date Range" @bind-DateRange="dateRange" AutoClose="true" DateFormat="dd.MM.yyyy" PickerVariant="PickerVariant.Dialog">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => picker.Clear())">Clear</MudButton>
                <MudButton OnClick="@(() => picker.Close(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => picker.Close())">Okay</MudButton>
            </PickerActions>
        </MudDateRangePicker>
    </MudContainer>
    @if (todoTasks.Count(todoTask => IsInRange(todoTask.StartTime)) == 0)
    {
        <MudText Align="Align.Center" Style="font-size: 30px;">No tasks in this range.</MudText>
    }
    else
    {
        <MudTimeline TimelinePosition="TimelinePosition.Left" Style="flex: 2;">
            @foreach (var todoTask in todoTasks)
            {
                if (IsInRange(todoTask.StartTime))
                {
                    <MudTimelineItem Color="GetColorByTodoTaskStatus(todoTask)" Size="Size.Small">
                        <ItemContent>
                            <MudCard Outlined="true" Elevation="25">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@todoTask.Title</MudText>
                                        <MudText Typo="Typo.body2">@todoTask.DateTimeToString()</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText>@todoTask.Description</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    @if (todoTask.Status == TodoTaskStatus.Completed)
                                    {
                                        <MudButton Class="mr-2"
                                   Variant="Variant.Filled"
                                   Color="Color.Success"
                                   OnClick="@(_ => SetTodoTaskToScheduled(todoTask.Id))">Completed</MudButton>
                                    }
                                    else if (todoTask.Status == TodoTaskStatus.Canceled)
                                    {
                                        <MudButton Class="mr-2"
                                   Variant="Variant.Filled"
                                   Color="Color.Error"
                                   OnClick="@(_ => SetTodoTaskToScheduled(todoTask.Id))">Canceled</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Class="mr-2"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="@(_ => CompleteTodoTask(todoTask.Id))">Complete</MudButton>
                                    }
                                    <MudMenu Variant="Variant.Filled" Color="Color.Info" Icon="@Icons.Material.Filled.MoreHoriz">
                                        <MudMenuItem OnClick="@(_ => EditTodoTask(todoTask.Id))">Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(_ => CopyTodoTask(todoTask.Id))">Copy</MudMenuItem>
                                        @if (todoTask.Status is not (TodoTaskStatus.Canceled or TodoTaskStatus.Completed))
                                        {
                                            <MudMenuItem OnClick="@(_ => CancelTodoTask(todoTask.Id))">Cancel</MudMenuItem>
                                        }
                                        <MudMenuItem OnClick="@(_ => DeleteTodoTask(todoTask.Id))">Delete</MudMenuItem>
                                    </MudMenu>
                                </MudCardActions>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            }
        </MudTimeline>
    }
</MudContainer>

@code {
    private IEnumerable<TodoTask> todoTasks = new List<TodoTask>();
    private bool isDataLoaded;

    private MudDateRangePicker picker;
    private DateRange dateRange = new DateRange(DateTime.Now.AddDays(-5).Date, DateTime.Now.AddDays(5).Date);

    private async Task ReloadData()
    {
        todoTasks = await TodoTaskService.GetTodoTasks();
        todoTasks = todoTasks.OrderBy(todoTask => todoTask.StartTime).ThenBy(todoTask => todoTask.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
            isDataLoaded = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private Color GetColorByTodoTaskStatus(TodoTask task)
    {
        return task.Status switch
        {
            TodoTaskStatus.Completed => Color.Success,
            TodoTaskStatus.Canceled => Color.Error,
            _ => Color.Primary
        };
    }

    private bool IsInRange(DateTime dateTime)
    {
        return dateTime >= dateRange.Start && dateTime <= dateRange.End;
    }

    private async Task EditTodoTask(int todoTaskId)
    {
        var parameters = new DialogParameters { { "TodoTaskId", todoTaskId } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<TodoTaskDialog>("Edit task", parameters, options);
        var result = await dialog.Result;
        if (result.Canceled == false)
        {
            await TodoTaskService.EditTodoTask(todoTaskId, ((TodoTaskDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task CompleteTodoTask(int todoTaskId)
    {
        var todotask = await TodoTaskService.GetTodoTask(todoTaskId);
        var model = new TodoTaskModel(todotask) { Status = TodoTaskStatus.Completed, ActualCompletionTime = DateTime.Now };

        await TodoTaskService.EditTodoTask(todoTaskId, model);
        await ReloadData();
    }

    private async Task CancelTodoTask(int todoTaskId)
    {
        var todotask = await TodoTaskService.GetTodoTask(todoTaskId);
        var model = new TodoTaskModel(todotask) { Status = TodoTaskStatus.Canceled };

        await TodoTaskService.EditTodoTask(todoTaskId, model);
        await ReloadData();
    }

    private async Task SetTodoTaskToScheduled(int todoTaskId)
    {
        var todotask = await TodoTaskService.GetTodoTask(todoTaskId);
        var model = new TodoTaskModel(todotask) { Status = TodoTaskStatus.Scheduled, ActualCompletionTime = DateTime.MinValue };

        await TodoTaskService.EditTodoTask(todoTaskId, model);
        await ReloadData();
    }

    private async Task CopyTodoTask(int todoTaskId)
    {
        var todotask = await TodoTaskService.GetTodoTask(todoTaskId);
        var model = new TodoTaskModel(todotask);

        await TodoTaskService.AddTodoTask(model);
        await ReloadData();
    }

    private async Task DeleteTodoTask(int todoTaskId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you really want to delete this task? This cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete task", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await TodoTaskService.DeleteTodoTask(todoTaskId);
            await ReloadData();
        }
    }
}
