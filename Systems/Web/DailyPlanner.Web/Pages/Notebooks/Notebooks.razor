@page "/notebooks"
@using DailyPlanner.Web.Pages.Notebooks.Services
@using DailyPlanner.Web.Pages.Notebooks.Models
@using Microsoft.IdentityModel.Tokens

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject INotebookService NotebookService

<MudContainer Fixed="true" Class="d-flex gap-10 px-10" Style="min-height: 100%;">
    <MudPaper Style="width: 200px;" Class="px-2 pb-2 align-self-start">
        <MudText Class="ma-4" Style="text-align: center; font-size: 26px;">Notebooks</MudText>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(_ => AddNotebook())">Add</MudButton>
    </MudPaper>
    
    <MudContainer Fixed="true" Class="d-flex flex-grow-1 justify-center align-center px-0">
        @if (isDataLoaded == false)
        {
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        }
        else if (notebooks.IsNullOrEmpty())
        {
            <MudText Align="Align.Center" Style="font-size: 40px;">No notebooks yet.</MudText>
        }
        else
        {
            <MudContainer Class="px-0" Style="max-width: 100%; min-height: 100%;">
                <MudGrid Class="justify-start align-self-start">
                    @foreach (var notebook in notebooks)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Style="position: relative;">
                            <MudCard>
                                <MudLink Color="Color.Inherit" Href="@($"/notebooks/{notebook.Id}/tasks")" Underline="Underline.None">
                                    <MudCardHeader Class="d-flex justify-center align-center">
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@notebook.Title</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                </MudLink>
                                <MudCardActions>
                                    <MudButton Href="@($"/notebooks/{notebook.Id}/tasks")" Class="mr-2" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary">Open</MudButton>
                                    <MudMenu Variant="Variant.Filled" Color="Color.Info" Icon="@Icons.Material.Filled.MoreHoriz">
                                        <MudMenuItem OnClick="@(_ => EditNotebook(notebook.Id))">Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(_ => DeleteNotebook(notebook.Id))">Delete</MudMenuItem>
                                    </MudMenu>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>
        }
    </MudContainer>
</MudContainer>


@code {
    private IEnumerable<Notebook> notebooks = new List<Notebook>();
    private bool isDataLoaded;

    private async Task ReloadData()
    {
        notebooks = await NotebookService.GetNotebooks(0, 100);
        notebooks = notebooks.OrderBy(notebook => notebook.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
            isDataLoaded = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddNotebook()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Add notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.AddNotebook(((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task EditNotebook(int notebookId)
    {
        var parameters = new DialogParameters { { "NotebookId", notebookId } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Edit notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.EditNotebook(notebookId, ((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task DeleteNotebook(int notebookId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you really want to delete this notebook? This cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.DeleteNotebook(notebookId);
            await ReloadData();
        }
    }
}