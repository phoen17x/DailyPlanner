@page "/notebooks"
@using DailyPlanner.Web.Pages.Notebooks.Services
@using DailyPlanner.Web.Pages.Notebooks.Models

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject INotebookService NotebookService

<MudText Typo="Typo.h4" Class="my-8" Style="text-align: center;">Notebooks</MudText>

<MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddNotebook())">Add</MudButton>

<MudGrid Class="justify-center px-15">
    @foreach (var notebook in notebooks)
    {
        <MudItem Style="width: 260px;">
            <MudCard>
                <MudLink Href="@($"/notebooks/{notebook.Id}/tasks")">
                    <MudCardHeader Class="d-flex justify-center align-center">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@notebook.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                </MudLink>
                <MudCardActions>
                    <MudIconButton Class="rounded" Style="width: 50%;" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@(_ => EditNotebook(notebook.Id))"/>
                    <MudIconButton Class="rounded" Style="width: 50%;" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@(_ => DeleteBook(notebook.Id))"/>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@code {
    private IEnumerable<Notebook> notebooks = new List<Notebook>();

    private async Task ReloadData()
    {
        notebooks = await NotebookService.GetNotebooks(0, 100);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddNotebook()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Add notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.AddNotebook(((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task EditNotebook(int notebookId)
    {
        var parameters = new DialogParameters { { "BookId", notebookId } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Edit notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.EditNotebook(notebookId, ((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task DeleteBook(int notebookId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you really want to delete this notebook? This cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.DeleteNotebook(notebookId);
            await ReloadData();
        }
    }
}