@page "/notebooks"
@using DailyPlanner.Web.Pages.Notebooks.Services
@using DailyPlanner.Web.Pages.Notebooks.Models

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject INotebookService NotebookService

<MudText Typo="Typo.h4" Class="my-8" Style="text-align: center;">Notebooks</MudText>

<MudContainer Fixed="true" Class="d-flex gap-10 px-10">
    <MudContainer Style="width: 200px;" Class="px-0">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(_ => AddNotebook())">Add</MudButton>
    </MudContainer>

    <MudContainer Fixed="true" Class="flex-grow-1 px-0">
        <MudGrid Class="justify-start">
            @foreach (var notebook in notebooks)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Style="position: relative;">
                    <MudLink Href="@($"/notebooks/{notebook.Id}/tasks")" Underline="Underline.None">
                        <MudCard>
                            <MudCardHeader Class="d-flex justify-center align-center">
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@notebook.Title</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudLink>
                    <MudMenu Style="position: absolute; top: 20px; right: 20px;" Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(_ => EditNotebook(notebook.Id))">Edit</MudMenuItem>
                        <MudMenuItem OnClick="@(_ => DeleteNotebook(notebook.Id))">Delete</MudMenuItem>
                    </MudMenu>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
</MudContainer>


@code {
    private IEnumerable<Notebook> notebooks = new List<Notebook>();

    private async Task ReloadData()
    {
        notebooks = await NotebookService.GetNotebooks(0, 100);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddNotebook()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Add notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.AddNotebook(((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task EditNotebook(int notebookId)
    {
        var parameters = new DialogParameters { { "NotebookId", notebookId } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<NotebookDialog>("Edit notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.EditNotebook(notebookId, ((NotebookDialog)dialog.Dialog).Model);
            await ReloadData();
        }
    }

    private async Task DeleteNotebook(int notebookId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you really want to delete this notebook? This cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete notebook", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            await NotebookService.DeleteNotebook(notebookId);
            await ReloadData();
        }
    }
}