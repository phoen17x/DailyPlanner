@using DailyPlanner.Web.Pages.Notebooks.Services
@using DailyPlanner.Web.Pages.Notebooks.Models
@inherits MudComponentBase

@inject INotebookService notebookService

<MudDialog>
    <DialogContent>
        <MudForm Model="Model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Title" @bind-Value="Model.Title"
                                  For="@(() => Model.Title)"
                                  Required="true"
                                  RequiredError="Title is required!">
                    </MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm form = new();

    NotebookModelValidator modelValidator = new();

    private bool isNew;

    [Parameter]
    public int? NotebookId { get; set; }

    [Parameter]
    public NotebookModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        isNew = NotebookId == null;
        if (isNew == false)
        {
            var notebook = await notebookService.GetNotebook(NotebookId ?? 0);
            Model.Id = notebook.Id;
            Model.Title = notebook.Title;
        }

        form.ResetValidation();
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid) MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}